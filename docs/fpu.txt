==== fpu math functions ====
Author: Benjamin Mayes

The implementations are suitable for user-level programs since process contexts
contain the FPU stack as well as conventional registers.

I broke functions up into three types:
> Single argument: Used a macro that created a function with NAME for the 
  mnemonic fNAME which takes a single operand off the top of the FPU stack
> Double argument: Used a macro that created a function with NAME for the
  mnemonic fNAME which takes two operands from the top of the FPU stack
> Other, more complicated, functions.
    > log2(x): Uses the fyl2x mnemonic with the 2nd operand (y) set to 1.
    > log_n(x): Uses two calls to the fyl2x mnemonic and a division.
    > pow(x,y): makes use of a log function to perform the exponentiation trick
                where you obtain x^y by performing 2^(y*log2(x)). Sounds easy.
                Sadly it isn't. You have to extract the integer and decimal 
                portions of y*log2(x) and calculate them seperately.

                To do this I used the f2xm1 instruction with the fractional
                power then used fscale to multiply it by 2^(int portion) to
                obtain the final x^y. It's messy but it's one of the fastest
                integer exponentiation routines you'll find.

Function prototypes:
extern inline double abs( double x );
extern inline double sqrt( double x );
extern inline double rndint( double x );
extern inline double sin( double x );
extern inline double cos( double x );
extern inline double patan( double x, double y );
extern inline double log2( double x );
extern inline double logn( double x, double base );
extern inline double pow( double x, double y );

Had some fun with this one. It turned out to be a good idea although I cannot
say it turned out to be as useful as I hoped it would but, if you want to see
the power routine in action, take a look at the mandelbrot and julia set demos
and change the coloring parameter.
